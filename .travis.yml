language: python
python: 
    - "3.8"
env:
    global:
        - secure: "CrZ4EgAQKVtLIdNPd72e/nLavks/p5C34wsTM2up0RYTwP90HKvka5wS+ATF0yHW4z5+Umjo+3HL89LV5k1AA7Tr00lzaHsB4WUMuwTrQKhtNoTfr2YMpBHYeWQ0OoEWAPLJEhshoP1uwb53LbMZS8qJ6p4D5fsNbAz9K86JYj6i8aCEOAgNY+qjtpGcUxGRWCEvMEmfjWQ+fVu8w+DnUzhGrRbnpA2O6eV5iT6dzqj5DPVCtod0rnMQBJNXAddTwigxPotdQpDSvhh2fHAe2HihVqYjJdzAI3zM19n0ZGg9ekkkKCyRbfDxyGM2SGirwzN9BLTBkH6wJEg2Bmdhi9YT3UuPW3KMEVISCH0PqN9gJFXALiZUfAEuj+/aRG/Oosc+k76ghwnIl8XsihEFQj9eJtnC9TeaH9xxdbEmP0RGkPqZEBu1YME5A7ZeKPAsH9Xvll+69ZzXbS3emVtLrRHt8ixHPVk4VGGETaIT7qMg1HVl0aXDpMf5q5OUIdQSoOuMvBO90i0gD7QHJ6RdyUrGb2fiUKpg83Bc/hhbD1xHDKi7JwP7dgnx6+lH3PVZesyxUy3wZEABkj8R4IfvlmfSc/S7Ss/jqhK1D3fpbJkR9ddMBisPfBrdiGkDtqXvibUmljnDFJt2q+XdlCjxo6jpBIa5urXOlTzX/RWwupE="
        - secure: "txuyVep+N1P0JwY8w0rvKHSDSmfsxEhrzzGYKMUDymuKKf0MKkbIWFKqkKsNLkGMBmKgHeAK+5U8l/V66VtDMXjnyBrYfSu4umY1O+KJ3oJIWLjY8OjGFQI+PipcukZyWV2OVP0RoHDTpciKQSHslWhqHb2eOVHrwu9puy5QcDwRI9lG1m1v9V0FocLm1IvHjrtzbOxyYGOaAFZ8g5bV5hgYee6iHGylLblH4UI23P2re19tscoGN2Yjz31Wzmr4JqRbATOsyMpLS/4J+sbJpQi0faKbQvIXYzrkwCDfnwPHfLdq/IZ3KJ/xKX6Lhr03ngUxvYEtNBnPPG+qR97emvwRvyWzw7mKnXnGha1yfeY3Y0ptuiSvyg4HwJXa/up7GEbLXNOhOQ5CFQDfAxcOFW/j9MgiGWUKTLi79awUnoYYXRdFkUO0h2k398Uk6qRtUhPTAocA951091m0rogbc8OR82H40eYyn2a4HGq1DQ1ekoraUiGdeLIQueRm+fBkDg2QHKWGf+Dv/8GacExFIziaSvabJBeK4agCZMZNKMkn4nahvThls8n6nDoPLMcpalt06+GYbAA+Pjli2T3hYsLhX2p441hmyyk32O0YPLrfphBw0cV26KEJMKMYOAkx/9rnUYbDDb2dC7z+d+AkDEtoMnDn+BmhQeuL684X+mU="

        - secure: "uMZtyIsHCOv/AbJPS+087Ze4LGzqEXCK9Y1Vtwr12uen1wmdDCXlow/OPdaZNtQChvOG8ViJHabe4c0PXmso2M7IaDhERfJrAmOXEWlNLGHVp5p0hJi9n4Y3yTOvBpOrp1QY2xWonyLJV+WFWratZndWVXkS3CqE0iqAwduary40KU8JJ02+w8up64eVKBIhWjavqBr1zRyHAgtG5AE9qvtquQ5YymnU6F2SiYGjrTgpaNuiZsDG1p4QROvxA/QHdX1C6pXeeUX+34/zWKLf76P8RpOX4yhfN+UEvRmuUOe7D9ORxLxO01SCCEc2sG3yolJdQj1kcvgNBoews5+5jiPvP1NScSVXQ5T8QIKo7YM1ZW+7BIenTiEie9ZM9RmqyPnBiWCkmyHAl0AgdBAG7hx7fCibhP9nmC+36zFYp1GnNnrqldBUQsz2Us/vFxMnt6m5fvXW0MArCdhIpLfLT1VFLbGovYV3xIMtW5JZ6Vdr6ziLb4bu0du1D2jZGOSYt77MkZPaRJWm1lZF//1TjMaYrVqq8c4JJ28AoejI35RMSr0aD39uv7w5FhGCRcA65Jr2WECHq3+ad5lpXlVPfjE2jqy6iIQKpCOL2dfKhbBPveSMAduMT8QrIky+UzWV+Sk2ZdL4HD9kNPCXHm98MhVnf+HJQM3O0CHSx+P5vmA="
services: 
    - docker 
#Only trigger Travis when pushed to master branch:
branches: 
    only: 
        - master
before_install:
    #Docker
    #Build image and run container
    #This can be moved to script if we want to see status for the build and run
    - cd app
    
    #- docker build -t "test_app_image" . 
    #- docker run -d -p 3000:5000 --name test_app_container test_app_image 
    
    #With docker-compose: 
    #- docker-compose up -d --build #Build to make sure the image is built
    - docker-compose build
    - docker-compose run -d --service-ports --name app_container app
    - docker ps
    - cd -

#First main phase is install
install:
    - pip install -r requirements.txt

#Second main phase is script
#This is where Travis tests and runs code
script:
#Run code involving content of code:
    - python -m unittest tests/test_structure.py
    - python -m unittest tests/test_content.py 
    #Simple python script can be run like this: 
    #- python firsttest.py
    #Running all tests in a package: 
    # - python -m unittest discover tests 


    #Tests involving the running of web app
    - python -m unittest tests/test_running.py

    #Stop and remove the running container
    - cd app
    - docker ps
    - docker stop $(docker ps -q -f "name=app_container")
    - docker ps

    - docker container rm $(docker ps -a -q -f "name=app_container") #Removes the container
    - cd -
    
#Additional actions?
#after_success:
#after_failure:
deploy:
    provider: script
    script: bash push-to-aws.sh