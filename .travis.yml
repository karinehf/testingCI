language: python
python: 
    - "3.8"
env:
    global:
        #- secure: "UE8YX6HeqQjAj+uy/EQjkLH79+7hBX6JJryNqXPYxot64kJ7JsEysZz1K6btF9tGENzShCrOmCMuBv7Snme/gawY1HHlVDyGqGEecX271c2sfC0vxiazEpfW0EgfABOKvjSORQC6GEuF7N0QaapfnnLN0t+zG0ObHu7Qoc/b3HswwyV+sD7u5vebjuJpQsUvRw1rCUso+Jn/DHXHBWH0lLE87PYSbOdmIoXYGDhgq0tY2kQn6Zja6fdfPz0YP6M7luDfhyTX36yw01yK0inIvfSbmw3k2lVkYFcUNkdqKHWgLqfSYSCThYkrVyLi7QhQx3Ws8n2EaVw2iOYY7r8r420l/hZYyrt4Evm42J1l9QJLzWrHbI0a3HJzg/tsxeXuQSsJ5frXTr0I5wfdDc9GovM+iJOMUE638vE+ozW3hMbHoOmrgDtg2hLmZuR3IXLg2WJ9wYtuO54PTTYYT1r921gsp/Szq6qadkVW01Fi8bAhx7+IWHiP4L0Io2tx7z9U9kjEs86qzQlmN5MWmtY1TNKxbvevi+f5OmMurAE8nGrPKk2mLODy8tyxNCsrlqmGPTd3IYQpsfq3uQzZkBpFZlaX9i0if4cXeFDJBkfUZdfvyM1B10Pb02Zo/fPmvWrMhHmoSB3mRT9K6niTBqynmhipOp6VAKzx36prq7x/8iY="
        #- secure: "TKEg3JyxNnAbVgXhBr7ep1Ani5m5H4GO+tMRvQSyEjUQl9SdIdQcYPLIz4h83gT4Gd7EbN+1GoR1lnMtCe4EwwchU73X5RcoAD+Ltgh7YitT3+6+J11QgREPxb1hcFeCv7YahTXcgXVq6cItYIBPGUvv2vSs1xwE5NTY5A7L2gTtXFZo07CJtbKxZB4TVD8ClNhaB48oSZGsc1oINRMaZ4fI8ijtY4MZMn09KzI/7OYTTggYZtkgwAszL15P7ZkbIxWwkxjEPoAkY5nu6+mACTjYS8lOFw6VToeerghb/eCuK3LHaWHjop9DMEfcSALjqsAzf3WWal9wPzn83lTROtWMx/ZnUeKAr6OHSp/BX+u1ZC5nUkXKfo5IJn8oQXe1VnzOJw4UvEzx7utI3C8ZTTUw71mvLVcys//kB7qfRTjnSf+4miWKtM3FvKx0FPZ98cbKnM6dpZ/IT5jBoLNsDZHqsvfcz4Rwy2thtPvydSIdI5ztAhWaro1FMlhrqI1/tiIHSFvL1lVLJplpYzAU2z6/Wg+TBcS2FaALUEHo//xl8MExxHx7QfhXcKuyc27QbOHFAGJdqZnr0s095p68A+uBTCKB2RIRvhpyMRWgeKcvGxuZ0k/gyWMaiCWAGr9A6Hw+Su1De2vuMhqm9OKYnIL7Ski0c/G8inWrh6w7Wn8="
        - secure: "M4GFbRRJ2mEJjKJ8eeBoV5jWLEq1BoWoq8MxM55tEayM8lavzpvkmjUvgWnCnMIGMMTM/sN00ptkHvtj077kRwvPyoq+pcd5PnL+9mh/eefjFxXbZEBV9gxlM3OqkN+9z3PdL7PaXW6BuaCjYMF+jQzA2imBA8PbyyU2MGVEGa9BXqmQ5SNyrVJOyQ0l0mflEJ6TBpn9B7XYMDoIl0V6+x++O0xmzo5wGvVMYkUvdUBXKTIS4tT0EdeNGdwkLAaKqQlLOGtvYgnlZszNNfOi9PHIAgcBH6dFA2UCCR17deDgb81Hqt+aEOBeH5JRa1aMkCM1N5BMHVvmEq3i4FmpUPFSAcUSfKBUq4KO5WXMk/cC0MkqOjbaV2FswRJP7iu1L66A1m9Ran6kZEHiAWtkugfwLjiWS9T/edvIwCKQy+bvQ0fmC5TnP8bfDZXyYuuu4bJDFLoxVwvWou1HwEG3aMfcgKQTH6EgMBar+mPf5Pu9m7hr2Wt2pdxh5sEsNMgcj7nVNkJqG+JpB5sTEbseX9rpqKl2tfsiSoZ3MQlNAB6BNF/s9/9zxDE+M3i/NHtwC9F9MewTc99m8RMmek2vyuTsy/VoZVNu7gfFUP4kEUQf5Mzu2JepzW/uKBJTtpaXvizCcQOk3dCdnlKzypGpv4O8AwSzwHkqpGgB6l+fX1U="
        - secure: "RhiLdeXXSaHFBA3cSWoNn4g9kej0HHH60VGvKX+RT4YD1Bb8yUCwMJRgBDo1K7K68x2Qgd4XwAW6UlKGyrE0pw3efBxOJBB5wHzq+ARbLevHq1QRLakt5woro93478vt7V/6ks7VYVERCDs/mabYqFBsqCVC/C8U5IZ0lHWH8ki6T6wy8h6i8OQzZlm1/XyWpDXu12+TgFrAR3wp9nUi4UllJfAjS07/BmXczwzPV0V0Fmu6iDohwpcOvx0/64EzI9dPddnLfhR76lOT50OI+8wJL/Gd/xRsn611pWYlqKLVyzivOIIvl+SiO1Rhy+wHEMn02W1Bs7KlgdHGYCTLWDGp/A4ycSSyGNGekZm6KTW8yygyUVANTuQX5A7qX8ISqKxfUcA4WnNCh0BxDzI+0p6Vd5z7n2py4ar5zsl7v5fCBcs8U3L4N/MTDtVyOEbslgkDziGtkT0AmQ+O8Q1nflBL6RP6MspmWF1ifA6Lp8duhC2vhNl3rRTwjLReTEo5ZTdgo6PU9Sf/DHy6EDiYUngO8LpdDPf+F2PdarEqMCWxsM1VxlEls9wzAKif6NX6IrxbHpZJfHYZUyJRjq6R9n0NE53ubX6MzuD2+5FpcrfhsRc6mGPxi0HbHUbVD2WDcuxJDFYQoUWumpdxxTCj9i63o4DTZk/cWIICENp1/GE="
services: 
    - docker 
#Only trigger Travis when pushed to master branch:
branches: 
    only: 
        - master
before_install:
    #Docker
    #Build image and run container
    #This can be moved to script if we want to see status for the build and run
    - cd app
    
    #- docker build -t "test_app_image" . 
    #- docker run -d -p 3000:5000 --name test_app_container test_app_image 
    
    #With docker-compose: 
    - docker-compose up -d --build #Build to make sure the image is built
    - docker ps
    - cd -

#First main phase is install
install:
    - pip install -r requirements.txt

#Second main phase is script
#This is where Travis tests and runs code
script:
#Run code involving content of code:
    - python -m unittest tests/test_structure.py
    - python -m unittest tests/test_content.py 
    #Simple python script can be run like this: 
    #- python firsttest.py
    #Running all tests in a package: 
    # - python -m unittest discover tests 


    #Tests involving the running of web app
    - python -m unittest tests/test_running.py

    #Stop and remove the running container
    - cd app
    - docker ps
    - docker stop $(docker ps -q -f "name=app_container")
    - docker ps

    - docker container rm $(docker ps -a -q -f "name=app_container") #Removes the container
    
    - pip install awscli
    - export PATH=$PATH:$HOME/.local/bin
    - eval $(aws ecr get-login --no-include-email --region eu-west-1) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    #- aws ecr get-login-password | docker login  --password-stdin --username AWS "459994320734.dkr.ecr.eu-west-1.amazonaws.com"
    - docker build -t app_image:latest .
    - docker tag app_image:latest 459994320734.dkr.ecr.eu-west-1.amazonaws.com/app-image-repo
    - docker push 459994320734.dkr.ecr.eu-west-1.amazonaws.com/app-image-repo:latest
 
#Additional actions?
#after_success:
#after_failure:
#deploy:
#    provider: script
#    script: bash push-to-aws.sh