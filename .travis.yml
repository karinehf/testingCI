language: python
python: 
    - "3.8"
env:
    global:
        #- secure: "UE8YX6HeqQjAj+uy/EQjkLH79+7hBX6JJryNqXPYxot64kJ7JsEysZz1K6btF9tGENzShCrOmCMuBv7Snme/gawY1HHlVDyGqGEecX271c2sfC0vxiazEpfW0EgfABOKvjSORQC6GEuF7N0QaapfnnLN0t+zG0ObHu7Qoc/b3HswwyV+sD7u5vebjuJpQsUvRw1rCUso+Jn/DHXHBWH0lLE87PYSbOdmIoXYGDhgq0tY2kQn6Zja6fdfPz0YP6M7luDfhyTX36yw01yK0inIvfSbmw3k2lVkYFcUNkdqKHWgLqfSYSCThYkrVyLi7QhQx3Ws8n2EaVw2iOYY7r8r420l/hZYyrt4Evm42J1l9QJLzWrHbI0a3HJzg/tsxeXuQSsJ5frXTr0I5wfdDc9GovM+iJOMUE638vE+ozW3hMbHoOmrgDtg2hLmZuR3IXLg2WJ9wYtuO54PTTYYT1r921gsp/Szq6qadkVW01Fi8bAhx7+IWHiP4L0Io2tx7z9U9kjEs86qzQlmN5MWmtY1TNKxbvevi+f5OmMurAE8nGrPKk2mLODy8tyxNCsrlqmGPTd3IYQpsfq3uQzZkBpFZlaX9i0if4cXeFDJBkfUZdfvyM1B10Pb02Zo/fPmvWrMhHmoSB3mRT9K6niTBqynmhipOp6VAKzx36prq7x/8iY="
        #- secure: "DkI9RJ3xvHDFXEK8XD9F92JsXicdbWCNY1dlmsMrZmWmuWKdpcR5qgjIrrYn7z0C7NBYHy4msuMBqyqYVUT3TkHvUpeW20z8+4qQ/PUBOvANmYH9HrvmSI05fhiQUJvyOkNcPtvzV+63DuOPhiSiM0lXYgi3H+/FPRHfJaNCVWJAAPuD67v+MThHSFsht7KHFDbcUK7yuDTkUHsryzk9B9/7fK4aXjMqVbGAnLNtzfOlCDoQC8ZiT5cWHi+zWlt6LnPMslAyzKNapaHfOLQyKrruenZjn+AmPkoPlnt8PuJejPN63JId2PB9mDB/Kn3p/kbu8rIVc1vXNOo4i7yM3HNnT1501ptcLEA82O7gJ7T5EKDOBApc+v7QWp+q64sAYvLRjfDkU/uHQwOp33DkIdPbvrGKp6WvsveJ1Vm4w26kGqPGim51iE/IlbmBxTXeZLgYwNAnN2n8mjnf0YJQnT/5Q+qC58UfkeiFoA79n2zzmqvfVZgXRjW8tx3VS0V54nRdJz+UK1nsPERnjUAi9zQIqxaDhS536zaGtsAn1uU4fMWaapOB+vEl7/N+3rfBdLjg58br2pE5dqUPvV0m8th+IB7erAca9bCnoDkhV4wPSw6K9z1pQh0RFpojmMXSH6KiSKDVSiqJ8Gyz5EHoWsXRr49cT/DI2iMT3MCMorQ="
        - secure: "CrZ4EgAQKVtLIdNPd72e/nLavks/p5C34wsTM2up0RYTwP90HKvka5wS+ATF0yHW4z5+Umjo+3HL89LV5k1AA7Tr00lzaHsB4WUMuwTrQKhtNoTfr2YMpBHYeWQ0OoEWAPLJEhshoP1uwb53LbMZS8qJ6p4D5fsNbAz9K86JYj6i8aCEOAgNY+qjtpGcUxGRWCEvMEmfjWQ+fVu8w+DnUzhGrRbnpA2O6eV5iT6dzqj5DPVCtod0rnMQBJNXAddTwigxPotdQpDSvhh2fHAe2HihVqYjJdzAI3zM19n0ZGg9ekkkKCyRbfDxyGM2SGirwzN9BLTBkH6wJEg2Bmdhi9YT3UuPW3KMEVISCH0PqN9gJFXALiZUfAEuj+/aRG/Oosc+k76ghwnIl8XsihEFQj9eJtnC9TeaH9xxdbEmP0RGkPqZEBu1YME5A7ZeKPAsH9Xvll+69ZzXbS3emVtLrRHt8ixHPVk4VGGETaIT7qMg1HVl0aXDpMf5q5OUIdQSoOuMvBO90i0gD7QHJ6RdyUrGb2fiUKpg83Bc/hhbD1xHDKi7JwP7dgnx6+lH3PVZesyxUy3wZEABkj8R4IfvlmfSc/S7Ss/jqhK1D3fpbJkR9ddMBisPfBrdiGkDtqXvibUmljnDFJt2q+XdlCjxo6jpBIa5urXOlTzX/RWwupE="
        - secure: "txuyVep+N1P0JwY8w0rvKHSDSmfsxEhrzzGYKMUDymuKKf0MKkbIWFKqkKsNLkGMBmKgHeAK+5U8l/V66VtDMXjnyBrYfSu4umY1O+KJ3oJIWLjY8OjGFQI+PipcukZyWV2OVP0RoHDTpciKQSHslWhqHb2eOVHrwu9puy5QcDwRI9lG1m1v9V0FocLm1IvHjrtzbOxyYGOaAFZ8g5bV5hgYee6iHGylLblH4UI23P2re19tscoGN2Yjz31Wzmr4JqRbATOsyMpLS/4J+sbJpQi0faKbQvIXYzrkwCDfnwPHfLdq/IZ3KJ/xKX6Lhr03ngUxvYEtNBnPPG+qR97emvwRvyWzw7mKnXnGha1yfeY3Y0ptuiSvyg4HwJXa/up7GEbLXNOhOQ5CFQDfAxcOFW/j9MgiGWUKTLi79awUnoYYXRdFkUO0h2k398Uk6qRtUhPTAocA951091m0rogbc8OR82H40eYyn2a4HGq1DQ1ekoraUiGdeLIQueRm+fBkDg2QHKWGf+Dv/8GacExFIziaSvabJBeK4agCZMZNKMkn4nahvThls8n6nDoPLMcpalt06+GYbAA+Pjli2T3hYsLhX2p441hmyyk32O0YPLrfphBw0cV26KEJMKMYOAkx/9rnUYbDDb2dC7z+d+AkDEtoMnDn+BmhQeuL684X+mU="
services: 
    - docker 
#Only trigger Travis when pushed to master branch:
branches: 
    only: 
        - master
before_install:
    #Docker
    #Build image and run container
    #This can be moved to script if we want to see status for the build and run
    - cd app
    
    #- docker build -t "test_app_image" . 
    #- docker run -d -p 3000:5000 --name test_app_container test_app_image 
    
    #With docker-compose: 
    - docker-compose up -d --build #Build to make sure the image is built
    - docker ps
    - cd -

#First main phase is install
install:
    - pip install -r requirements.txt

#Second main phase is script
#This is where Travis tests and runs code
script:
#Run code involving content of code:
    - python -m unittest tests/test_structure.py
    - python -m unittest tests/test_content.py 
    #Simple python script can be run like this: 
    #- python firsttest.py
    #Running all tests in a package: 
    # - python -m unittest discover tests 


    #Tests involving the running of web app
    - python -m unittest tests/test_running.py

    #Stop and remove the running container
    - cd app
    - docker ps
    - docker stop $(docker ps -q -f "name=app_container")
    - docker ps

    - docker container rm $(docker ps -a -q -f "name=app_container") #Removes the container
    
    - pip install awscli
    - export PATH=$PATH:$HOME/.local/bin
    - eval $(aws ecr get-login --no-include-email --region eu-west-1) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    #- aws ecr get-login-password | docker login  --password-stdin --username AWS "459994320734.dkr.ecr.eu-west-1.amazonaws.com"
    - docker build -t app_image:latest .
    - docker tag app_image:latest 459994320734.dkr.ecr.eu-west-1.amazonaws.com/app-image-repo
    - docker push 459994320734.dkr.ecr.eu-west-1.amazonaws.com/app-image-repo:latest
 
#Additional actions?
#after_success:
#after_failure:
#deploy:
#    provider: script
#    script: bash push-to-aws.sh